{"ast":null,"code":"import { observable, action, runInAction } from \"mobx\";\nconst store = observable({\n  products: [],\n  getProducts: async () => {\n    try {\n      const res = await fetch(\"https://react-tutorial-demo.firebaseio.com/supermarket.json\");\n      const data = await res.json();\n      return runInAction(() => store.products = data);\n    } catch (err) {\n      console.log(err);\n    }\n  },\n  cart: [],\n  getItems: () => store.cart.map(product => {\n    return {\n      price: product.price_id,\n      quantity: product.quantity\n    };\n  }),\n  cartToRedis: async () => {\n    fetch(\"http://localhost:9292/save\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(store.cart)\n    }).then(res => console.log(res.status));\n  },\n\n  cartToLS() {\n    try {\n      return localStorage.setItem(\"cart\", JSON.stringify(store.cart));\n    } catch (err) {\n      console.log(\"pb with localStorage\", err);\n    }\n  },\n\n  findProductInCart: id => {\n    return store.cart.find(product => product.id === +id); // make sure it's a number\n  },\n  findQuantityById: id => {\n    if (store.cart.length > 0) {\n      const product = store.cart.find(product => product.id === +id); // make sure it's a number\n\n      if (product) return product.quantity;\n    }\n\n    return 0;\n  },\n  totalPrice: () => {\n    if (store.cart.length > 0) {\n      return store.cart.reduce((total, product) => total + product.price * product.quantity, 0);\n    }\n\n    return 0;\n  },\n  getCartFromRedis: async () => {\n    const request = await fetch(\"http://localhost:9292\");\n    const {\n      data\n    } = await request.json();\n    runInAction(() => store.cart = JSON.parse(data) || []);\n  },\n  getCartFromLS: action(() => {\n    try {\n      const getFromLS = JSON.parse(localStorage.getItem(\"cart\"));\n      store.cart = getFromLS || [];\n    } catch (err) {\n      store.cart = [];\n    }\n\n    return store.cart;\n  }),\n  cartCount: () => {\n    var _store$cart;\n\n    if (((_store$cart = store.cart) === null || _store$cart === void 0 ? void 0 : _store$cart.length) > 0) {\n      return store.cart.reduce((total, product) => total + product.quantity, 0);\n    } else {\n      return 0;\n    }\n  },\n  productDelete: action(id => {\n    return store.cart = store.cart.filter(product => product.id !== id);\n  }),\n  productAdd: action(newProduct => {\n    const existingProduct = store.cart.find(product => product.id === newProduct.id);\n\n    if (!existingProduct) {\n      return store.cart = [...store.cart, { ...newProduct,\n        quantity: 1\n      }];\n    }\n\n    return store.cart = store.cart.map(product => {\n      if (product.id === newProduct.id) {\n        return { ...product,\n          quantity: product.quantity + 1\n        };\n      }\n\n      return product;\n    });\n  })\n});\nexport default store;","map":{"version":3,"sources":["/Users/utilisateur/code/ndrean/learn-javascript/superm-v4/frontend/src/store.js"],"names":["observable","action","runInAction","store","products","getProducts","res","fetch","data","json","err","console","log","cart","getItems","map","product","price","price_id","quantity","cartToRedis","method","headers","body","JSON","stringify","then","status","cartToLS","localStorage","setItem","findProductInCart","id","find","findQuantityById","length","totalPrice","reduce","total","getCartFromRedis","request","parse","getCartFromLS","getFromLS","getItem","cartCount","productDelete","filter","productAdd","newProduct","existingProduct"],"mappings":"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","sourcesContent":["import { observable, action, runInAction } from \"mobx\";\n\nconst store = observable({\n  products: [],\n  getProducts: async () => {\n    try {\n      const res = await fetch(\n        \"https://react-tutorial-demo.firebaseio.com/supermarket.json\"\n      );\n      const data = await res.json();\n      return runInAction(() => (store.products = data));\n    } catch (err) {\n      console.log(err);\n    }\n  },\n\n  cart: [],\n  getItems: () =>\n    store.cart.map((product) => {\n      return { price: product.price_id, quantity: product.quantity };\n    }),\n  cartToRedis: async () => {\n    fetch(\"http://localhost:9292/save\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(store.cart),\n    }).then((res) => console.log(res.status));\n  },\n  cartToLS() {\n    try {\n      return localStorage.setItem(\"cart\", JSON.stringify(store.cart));\n    } catch (err) {\n      console.log(\"pb with localStorage\", err);\n    }\n  },\n  findProductInCart: (id) => {\n    return store.cart.find((product) => product.id === +id); // make sure it's a number\n  },\n  findQuantityById: (id) => {\n    if (store.cart.length > 0) {\n      const product = store.cart.find((product) => product.id === +id); // make sure it's a number\n      if (product) return product.quantity;\n    }\n    return 0;\n  },\n  totalPrice: () => {\n    if (store.cart.length > 0) {\n      return store.cart.reduce(\n        (total, product) => total + product.price * product.quantity,\n        0\n      );\n    }\n    return 0;\n  },\n  getCartFromRedis: async () => {\n    const request = await fetch(\"http://localhost:9292\");\n    const { data } = await request.json();\n    runInAction(() => (store.cart = JSON.parse(data) || []));\n  },\n  getCartFromLS: action(() => {\n    try {\n      const getFromLS = JSON.parse(localStorage.getItem(\"cart\"));\n      store.cart = getFromLS || [];\n    } catch (err) {\n      store.cart = [];\n    }\n    return store.cart;\n  }),\n  cartCount: () => {\n    if (store.cart?.length > 0) {\n      return store.cart.reduce((total, product) => total + product.quantity, 0);\n    } else {\n      return 0;\n    }\n  },\n  productDelete: action((id) => {\n    return (store.cart = store.cart.filter((product) => product.id !== id));\n  }),\n  productAdd: action((newProduct) => {\n    const existingProduct = store.cart.find(\n      (product) => product.id === newProduct.id\n    );\n    if (!existingProduct) {\n      return (store.cart = [\n        ...store.cart,\n        {\n          ...newProduct,\n          quantity: 1,\n        },\n      ]);\n    }\n    return (store.cart = store.cart.map((product) => {\n      if (product.id === newProduct.id) {\n        return {\n          ...product,\n          quantity: product.quantity + 1,\n        };\n      }\n      return product;\n    }));\n  }),\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}